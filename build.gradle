//buildscript {
//    dependencies {
//        classpath 'org.spongepowered:mixingradle:0.7.+'
//    }
//}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id "com.hypherionmc.modutils.modpublisher" version "2.1.7"
}

//apply plugin: 'org.spongepowered.mixin'

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
   
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    runs {

        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

//mixin {
//    config 'emi.mixins.json'
//    debug {
//        verbose = true
//        exportMixinAP = true
//    }
//}

repositories {
    maven { url = "https://raw.github.com/0999312/MMMaven/main/repository" }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name "KosmX's maven"
        url 'https://maven.kosmx.dev/'
    }

    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    
    // Patchouli
    maven { url = 'https://maven.blamejared.com' }

    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        forRepositories(fg.repository) // Only add this if you're using ForgeGradle, otherwise remove this line
        filter {
            includeGroup "maven.modrinth"
        }
    }
    dependencies {

        minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

//    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

        implementation fg.deobf("cn.mcmod_mmf.mysterious_mountain_lib:MMLib:1.5.22-1.20.1")
        // Compile against only the API artifact
        compileOnly(fg.deobf("top.theillusivec4.curios:curios-forge:5.14.1+1.20.1:api"))
        // Use the full Curios API jar at runtime
        runtimeOnly(fg.deobf("top.theillusivec4.curios:curios-forge:5.14.1+1.20.1"))

        implementation fg.deobf("maven.modrinth:slashblade-resharped:${slashblade_version}")

        implementation fg.deobf("maven.modrinth:sjap:1.2.15-1.20.1")
        implementation fg.deobf("maven.modrinth:energyblade:1.1.5-1.20.1")

        implementation fg.deobf("maven.modrinth:umapyoi:1.10.62-1.20.1")
        implementation fg.deobf("maven.modrinth:blades-derby:1.0.3")

        implementation fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${project.player_anim}")

        compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.20.1-83-FORGE")
        runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.20.1-83-FORGE")

        // compile against the JEI API but do not include it at runtime
        compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
        compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
        // at runtime, use the full JEI jar for Forge
        runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

        compileOnly fg.deobf("dev.emi:emi-forge:${emi_version}:api")
    runtimeOnly fg.deobf("dev.emi:emi-forge:${emi_version}")
    }
}


// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
            slashblade_version_range:slashblade_version_range,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

publisher {
    apiKeys {
        // Modrinth Token
        modrinth System.getenv("MODRINTH_TOKEN")
        // Curseforge Token
        curseforge System.getenv("CURSE_TOKEN")
    }

    // Enable Debug mode. When enabled, no files will actually be uploaded
    // setDebug(true)

    // Curseforge Project ID
    setCurseID("306385")

    // Modrinth Project ID
    setModrinthID("the-last-smith")

    setVersionType("release")

    setChangelog("Changelog WIP...")

    setVersion("${project.version}")

    setDisplayName("[1.20.1] The Last Smith:Resharped - ${project.version}")

    setGameVersions("1.20.1")

    setLoaders("forge", "neoforge")

    setCurseEnvironment("both")

    setArtifact(jar)

    setJavaVersions("Java 17", "Java 18", "Java 21", "Java 20", "Java 21")

    setDisableEmptyJarCheck(true)

    // Curse Dependencies
    curseDepends {
        required "mysterious-mountain-lib", "slashblade-resharped"
        optional 'playeranimator'

        // Optional dependency
        optional 'jei'

        // Optional dependency
        optional 'the-twilight-forest'
        
        optional 'slashblade-hf-blade'
        
        optional 'sjap'
        
        optional 'patchouli'
    }

    modrinthDepends {
    	required "mmlib", "slashblade-resharped"
        // Optional dependency
        optional 'playeranimator'
        optional 'jei'
        
        optional 'sjap'
        
        optional 'energyblade'
        
        optional 'patchouli'
    }

}